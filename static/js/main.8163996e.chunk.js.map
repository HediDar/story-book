{"version":3,"sources":["reducers/tasksReducer.js","actions/actions-types.js","store.js","domain/myAPIS.js","components/AddToDo.jsx","actions/tasksActions.js","components/SingleTask.jsx","selectors/filterSelector.js","components/ToDosAndDones.jsx","App.js","index.js"],"names":["initialStates","tasks","loaderBool","displayMode","connectionBool","tasksReducer","state","action","type","taskArg","payload","data","_id","name","description","important","done","console","log","id","resultToSend","i","length","myData","meta","configureStore","createStore","tasksRecuder","applyMiddleware","promiseMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","addTask","task","axios","post","deleteTask","delete","updateTask","put","AddToDo","props","useState","nameText","setTextName","DescriptionArea","setDescriptionArea","importantRadio","setImportantRadio","addTaskByApiAction","Grid","container","style","justifyContent","alignItems","item","xs","md","lg","xl","TextField","onChange","e","target","value","inputProps","textAlign","fullWidth","label","multiline","rowsMax","RadioGroup","row","aria-label","FormControlLabel","control","Radio","Button","disabled","color","onClick","alert","onClickCalls","defaultProps","connect","dispatch","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","SingleTask","onDone","onDeleteTask","onImportant","classes","Accordion","defaultExpanded","backgroundColor","AccordionSummary","aria-controls","Typography","AccordionDetails","className","Divider","AccordionActions","getDisplayMode","filterTasks","createSelector","myArray","Object","values","sort","a","b","filter","el","getButtonsColorByDisplayMode","ToDosAndDones","onImportantHandle","taskVar","updateTaskByApiAction","importantOrDoneBool","onDoneHandle","onDeleteHandle","deleteTaskByApiAction","allButtonClick","changeDisplayModeAction","handleActiveButtonClick","handleAllcompletedButtonClick","refreshComponent","location","reload","fetchAllTasksByApiAction","this","tasksFiltred","GroupButtonsColors","Table","display","TableHead","TableRow","TableCell","align","height","ButtonGroup","TableBody","colSpan","component","scope","map","key","Component","get","App","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.8163996e.chunk.js","sourcesContent":["import {\n  DISPLAY_MODE,\n  FETCH_DATA_PENDING,\n  FETCH_DATA_FULFILLED,\n  FETCH_DATA_REJECTED,\n  DELETE_DATA_PENDING,\n  DELETE_DATA_FULFILLED,\n  DELETE_DATA_REJECTED,\n  UPDATE_TASK_PENDING,\n  UPDATE_TASK_FULFILLED,\n  UPDATE_TASK_REJECTED,\n  ADD_TASK_FULFILLED,\n  ADD_TASK_PENDING,\n  ADD_TASK_REJECTED,\n  LOADER_BOOL,\n} from \"../actions/actions-types\";\n\nconst initialStates = {\n  tasks: {},\n  loaderBool: true,\n  displayMode: \"all\",\n  connectionBool: true,\n};\n\nfunction tasksReducer(state = initialStates, action) {\n  // if state is empty, we take initialStates\n  const { type } = action;\n\n  // ///////////////////add promise\n  if (type === ADD_TASK_PENDING)\n    return {\n      ...state,\n      loaderBool: true,\n      connectionBool: true,\n    };\n  if (type === ADD_TASK_FULFILLED) {\n    const taskArg = action.payload.data.data;\n\n    return {\n      ...state,\n      tasks: {\n        ...state.tasks,\n        [taskArg._id]: {\n          _id: taskArg._id,\n          name: taskArg.name,\n          description: taskArg.description,\n          important: taskArg.important,\n          done: false,\n        },\n      },\n      loaderBool: false,\n    };\n  }\n  if (type === ADD_TASK_REJECTED) {\n    console.log(\"errror\");\n    return {\n      ...state,\n      loaderBool: false,\n      connectionBool: false,\n    };\n  }\n\n  // /////////////////////data delete promise treatment\n  if (type === DELETE_DATA_PENDING)\n    return {\n      ...state,\n      loaderBool: true,\n      connectionBool: true,\n    };\n  if (type === DELETE_DATA_FULFILLED) {\n    const data = { ...state.tasks };\n    const id = action.payload.data.data;\n    delete data[id];\n    return {\n      ...state,\n      tasks: data,\n      loaderBool: false,\n    };\n  }\n  if (type === DELETE_DATA_REJECTED) {\n    console.log(\"delete error\");\n    return {\n      ...state,\n      loaderBool: false,\n      connectionBool: false,\n    };\n  }\n\n  // //////////////////data fetching promise treatment\n  if (type === FETCH_DATA_PENDING)\n    return {\n      ...state,\n      loaderBool: true,\n      connectionBool: true,\n    };\n  if (type === FETCH_DATA_FULFILLED) {\n    const resultToSend = {};\n    for (let i = 0; i < action.payload.data.length; i++) {\n      resultToSend[action.payload.data[i]._id] = action.payload.data[i];\n    }\n\n    return {\n      ...state,\n      tasks: resultToSend,\n      loaderBool: false,\n    };\n  }\n  if (type === FETCH_DATA_REJECTED) {\n    console.log(\"errror\");\n    return {\n      ...state,\n      loaderBool: false,\n      connectionBool: false,\n    };\n  }\n\n  // /////////////////////data update promise\n  if (type === UPDATE_TASK_PENDING)\n    return {\n      ...state,\n      loaderBool: true,\n      connectionBool: true,\n    };\n  if (type === UPDATE_TASK_FULFILLED) {\n    const myData = { ...state.tasks };\n    const { _id } = action.payload.data.data;\n\n    if (action.meta === true) {\n      if (myData[_id].important === false) myData[_id].important = true;\n      else myData[_id].important = false;\n\n      return {\n        ...state,\n        tasks: myData,\n        loaderBool: false,\n      };\n    }\n\n    if (myData[_id].done === false) myData[_id].done = true;\n    else myData[_id].done = false;\n\n    return {\n      ...state,\n      tasks: myData,\n      loaderBool: false,\n    };\n  }\n  if (type === UPDATE_TASK_REJECTED) {\n    console.log(\"errror\");\n    return {\n      ...state,\n      loaderBool: false,\n      connectionBool: false,\n    };\n  }\n\n  // end promise treatment\n\n  if (type === DISPLAY_MODE)\n    return {\n      ...state,\n      displayMode: action.payload,\n    };\n\n  if (type === LOADER_BOOL)\n    return {\n      ...state,\n      loaderBool: true,\n    };\n\n  return state;\n}\n\nexport default tasksReducer;\n","export const DISPLAY_MODE = \"DISPLAY_MODE\";\n\nexport const FETCH_DATA = \"FETCH_DATA\";\n\nexport const FETCH_DATA_PENDING = \"FETCH_DATA_PENDING\";\n\nexport const FETCH_DATA_FULFILLED = \"FETCH_DATA_FULFILLED\";\n\nexport const FETCH_DATA_REJECTED = \"FETCH_DATA_REJECTED\";\n\nexport const DELETE_DATA = \"DELETE_DATA\";\n\nexport const DELETE_DATA_PENDING = \"DELETE_DATA_PENDING\";\n\nexport const DELETE_DATA_FULFILLED = \"DELETE_DATA_FULFILLED\";\n\nexport const DELETE_DATA_REJECTED = \"DELETE_DATA_REJECTED\";\n\nexport const UPDATE_TASK = \"UPDATE_TASK\";\n\nexport const UPDATE_TASK_PENDING = \"UPDATE_TASK_PENDING\";\n\nexport const UPDATE_TASK_FULFILLED = \"UPDATE_TASK_FULFILLED\";\n\nexport const UPDATE_TASK_REJECTED = \"UPDATE_TASK_REJECTED\";\n\n\nexport const ADD_TASK = \"ADD_TASK\";\n\nexport const ADD_TASK_PENDING = \"ADD_TASK_PENDING\";\n\nexport const ADD_TASK_FULFILLED = \"ADD_TASK_FULFILLED\";\n\nexport const ADD_TASK_REJECTED = \"ADD_TASK_REJECTED\";\n\nexport const LOADER_BOOL = \"LOADER_BOOL\";\n\n","import { createStore, applyMiddleware } from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport tasksRecuder from \"./reducers/tasksReducer\";\n\nfunction configureStore(state) {\n  return createStore(\n    tasksRecuder,\n    applyMiddleware(promiseMiddleware),\n    state,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n}\n\n// composeStoreWithMiddleware = applyMiddleware(\n//   promise,\n// )(createStore)\n\n// applyMiddleware(promise)(\n//   createStore(\n//     tasksRecuder,\n//     state,\n//     window.__REDUX_DEVTOOLS_EXTENSION__ &&\n//       window.__REDUX_DEVTOOLS_EXTENSION__()\n//   )\n// );\n\nexport default configureStore;\n","import axios from \"axios\";\n\nexport function getAllTasks() {\n  return axios.get(\"https://my-front-end-to-do.herokuapp.com/api/tasks\");\n}\n\nexport function addTask(task) {\n  return axios.post(\"https://my-front-end-to-do.herokuapp.com/api/tasks\", {\n    name: task.name,\n    description: task.description,\n    important: task.important,\n    done: task.done,\n  });\n}\n\nexport function deleteTask({id}) {\n  return axios.delete(\"https://my-front-end-to-do.herokuapp.com/api/tasks?_id=\" + id);\n}\n\nexport function updateTask(task) {\n  return axios.put(\"https://my-front-end-to-do.herokuapp.com/api/tasks?_id=\" + task._id, {\n    name: task.name,\n    description: task.description,\n    important: task.important,\n    done: task.done,\n  });\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  RadioGroup,\n  FormControlLabel,\n  Button,\n  TextField,\n  Grid,\n  Radio,\n} from \"@material-ui/core\";\n\nimport * as actionCreators from \"../actions/tasksActions\";\n\nconst AddToDo = (props) => {\n  const [nameText, setTextName] = useState(\"\");\n  const [DescriptionArea, setDescriptionArea] = useState(\"\");\n  const [importantRadio, setImportantRadio] = useState(\"notImportant\");\n  const { addTaskByApiAction,connectionBool,loaderBool } = props;\n\n  function onClickCalls() {\n    if (nameText === \"\") alert(\"you need to name your task\");\n    else {\n      let myTask = {};\n      if (importantRadio === \"notImportant\") {\n        myTask = {\n          name: nameText,\n          description: DescriptionArea,\n          important: false,\n          done: false,\n        };\n      } else {\n        myTask = {\n          name: nameText,\n          description: DescriptionArea,\n          important: true,\n          done: false,\n        };\n      }\n\n      addTaskByApiAction(myTask);\n    }\n    setTextName(\"\");\n    setDescriptionArea(\"\");\n    setImportantRadio(\"notImportant\");\n  }\n\n  return (\n    <>\n      <Grid container style={{ justifyContent: \"center\" }}>\n        <Grid alignItems=\"center\" container item xs={12} md={10} lg={8}>\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\n            <TextField\n              onChange={(e) => {\n                setTextName(e.target.value);\n              }}\n              value={nameText}\n              inputProps={{ style: { textAlign: \"center\" } }}\n              fullWidth\n              id=\"standard-basic\"\n              label=\"task name\"\n            />\n          </Grid>\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\n            <TextField\n              onChange={(e) => {\n                setDescriptionArea(e.target.value);\n              }}\n              value={DescriptionArea}\n              inputProps={{ style: { textAlign: \"center\" } }}\n              fullWidth\n              id=\"standard-multiline-flexible\"\n              label=\"task description\"\n              multiline\n              rowsMax={4}\n            />\n          </Grid>\n\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\n            <RadioGroup\n              onChange={(e) => {\n                setImportantRadio(e.target.value);\n              }}\n              row\n              aria-label=\"gender\"\n              name=\"myRadioGroup\"\n              value={importantRadio}\n            >\n              <FormControlLabel\n                value=\"notImportant\"\n                control={<Radio />}\n                label=\"Not important\"\n              />\n              <FormControlLabel\n                value=\"Important\"\n                control={<Radio />}\n                label=\"Important\"\n              />\n            </RadioGroup>\n          </Grid>\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\n            <Button\n              disabled={!connectionBool||loaderBool}\n              fullWidth\n              color=\"secondary\"\n              onClick={() => onClickCalls()}\n            >\n              Add task\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nAddToDo.propTypes = {\n  addTaskByApiAction: PropTypes.func,\n};\nAddToDo.defaultProps = {\n  addTaskByApiAction: () => {},\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    connectionBool: state.connectionBool,\n    loaderBool: state.loaderBool,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTaskByApiAction: (payload) =>\n    dispatch(actionCreators.addTaskByApiAction(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDo);\n","import {\n  DISPLAY_MODE,\n  ADD_TASK,\n  FETCH_DATA,\n  DELETE_DATA,\n  UPDATE_TASK,\n  LOADER_BOOL,\n} from \"./actions-types\";\nimport { getAllTasks, deleteTask, updateTask, addTask } from \"../domain/myAPIS\";\n\nconst fetchAllTasksByApiAction = () => {\n  return {\n    type: FETCH_DATA,\n    payload: getAllTasks(),\n  };\n};\n\nconst addTaskByApiAction = (task) => {\n  return {\n    type: ADD_TASK,\n    payload: addTask(task),\n  };\n};\n\nfunction deleteTaskByApiAction({ id }) {\n  return {\n    type: DELETE_DATA,\n    payload: deleteTask({ id }),\n  };\n}\n\nfunction updateTaskByApiAction(task) {\n  // console.log(isImportantTest);\n  return {\n    type: UPDATE_TASK,\n    payload: updateTask(task),\n    meta: task.importantOrDoneBool,\n  };\n}\n\nfunction changeDisplayModeAction(mode) {\n  return {\n    type: DISPLAY_MODE,\n    payload: mode,\n  };\n}\n\nfunction addTaskAction(task) {\n  return {\n    type: ADD_TASK,\n    payload: { ...task },\n  };\n}\n\nfunction setLoaderBoolToActiveAction() {\n  return {\n    type: LOADER_BOOL,\n  };\n}\n\nexport {\n  setLoaderBoolToActiveAction,\n  addTaskByApiAction,\n  updateTaskByApiAction,\n  deleteTaskByApiAction,\n  fetchAllTasksByApiAction,\n  changeDisplayModeAction,\n  addTaskAction,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionActions from \"@material-ui/core/AccordionActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst SingleTask = (props) => {\n  const { task, onDone, onDeleteTask, onImportant } = props;\n\n  const classes = useStyles();\n\n  if (task.done === false && task.important === true)\n    return (\n      <>\n        <Accordion defaultExpanded style={{ backgroundColor: \"yellow\" }}>\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\n            <div>\n              <Typography>{task.name}</Typography>\n            </div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <Typography className={classes.secondaryHeading}>\n                {task.description}\n              </Typography>\n            </div>\n          </AccordionDetails>\n          <Divider />\n          <AccordionActions>\n            <Button color=\"secondary\" onClick={() => onImportant(task)}>\n              {\" \"}\n              remove from important\n            </Button>\n\n            <Button color=\"secondary\" onClick={() => onDone(task)}>\n              {\" \"}\n              Add to done\n            </Button>\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\n              Delete\n            </Button>\n          </AccordionActions>\n        </Accordion>\n      </>\n    );\n  if (task.done === false && task.important === false)\n    return (\n      <>\n        <Accordion defaultExpanded style={{ backgroundColor: \"white\" }}>\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\n            <div>\n              <Typography>{task.name}</Typography>\n            </div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <Typography className={classes.secondaryHeading}>\n                {task.description}\n              </Typography>\n            </div>\n          </AccordionDetails>\n          <Divider />\n          <AccordionActions>\n            <Button color=\"secondary\" onClick={() => onImportant(task)}>\n              {\" \"}\n              make Important\n            </Button>\n            <Button color=\"secondary\" onClick={() => onDone(task)}>\n              {\" \"}\n              Add to done\n            </Button>\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\n              Delete\n            </Button>\n          </AccordionActions>\n        </Accordion>\n      </>\n    );\n  if (task.done === true)\n    return (\n      <>\n        <Accordion defaultExpanded style={{ backgroundColor: \"lightgrey\" }}>\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\n            <div>\n              <Typography>{task.name}</Typography>\n            </div>\n          </AccordionSummary>\n          <AccordionDetails>\n            <div>\n              <Typography className={classes.secondaryHeading}>\n                {task.description}\n              </Typography>\n            </div>\n          </AccordionDetails>\n          <Divider />\n          <AccordionActions>\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\n              Delete\n            </Button>\n          </AccordionActions>\n        </Accordion>\n      </>\n    );\n  return <></>;\n};\nSingleTask.propTypes = {\n  task: PropTypes.shape(),\n  onDone: PropTypes.func,\n  onDeleteTask: PropTypes.func,\n  onImportant: PropTypes.func,\n};\nSingleTask.defaultProps = {\n  task: {},\n  onDone: () => {},\n  onDeleteTask: () => {},\n  onImportant: () => {},\n};\nexport default SingleTask;\n","import { createSelector } from \"reselect\";\n\nconst getTasks = (state) => state.tasks;\nconst getDisplayMode = (state) => state.displayMode;\n\n// eslint-disable-next-line import/prefer-default-export\nexport const filterTasks = createSelector(\n  [getDisplayMode, getTasks],\n  (displayMode, tasks) => {\n    let myArray = Object.values({ ...tasks });\n\n    if (displayMode === \"all\") {\n      myArray.sort((a, b) => (a.important && !b.important ? 1 : -1));\n      myArray.sort((a, b) => (a.done && !b.done ? 1 : -1));\n      return myArray;\n    }\n\n    if (displayMode === \"actif\") {\n      myArray.sort((a, b) => (a.important && !b.important ? 1 : -1));\n      myArray.sort((a, b) => (a.done && !b.done ? 1 : -1));\n      myArray = myArray.filter((el) => el.done === false);\n      return myArray;\n    }\n    if (displayMode === \"done\") {\n      myArray = myArray.filter((el) => el.done === true);\n      return myArray;\n    }\n    return tasks;\n  }\n);\n\nexport const getButtonsColorByDisplayMode = createSelector(\n  [getDisplayMode],\n  (displayMode) => {\n    if (displayMode === \"all\") {\n      const colorAll = \"primary\";\n      const colorActif = \"secondary\";\n      const colorDone = \"secondary\";\n      return [colorAll, colorActif, colorDone];\n    }\n\n    if (displayMode === \"actif\") {\n      const colorAll = \"secondary\";\n      const colorActif = \"primary\";\n      const colorDone = \"secondary\";\n      return [colorAll, colorActif, colorDone];\n    }\n\n    if (displayMode === \"done\") {\n      const colorAll = \"secondary\";\n      const colorActif = \"secondary\";\n      const colorDone = \"primary\";\n      return [colorAll, colorActif, colorDone];\n    }\n    return [];\n  }\n);\n","import React, { Component } from \"react\";\nimport PropTypes, { string } from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Loader from \"react-loader-spinner\";\nimport SingleTask from \"./SingleTask\";\n\nimport {\n  filterTasks,\n  getButtonsColorByDisplayMode,\n} from \"../selectors/filterSelector\";\nimport * as actionCreators from \"../actions/tasksActions\";\n\nclass ToDosAndDones extends Component {\n  componentDidMount() {\n    const { fetchAllTasksByApiAction } = this.props;\n    fetchAllTasksByApiAction();\n  }\n\n  onImportantHandle = (task) => {\n    const taskVar = { ...task };\n    const { updateTaskByApiAction } = this.props;\n    if (taskVar.important === false) taskVar.important = true;\n    else taskVar.important = false;\n    taskVar.importantOrDoneBool = true;\n\n    updateTaskByApiAction(taskVar);\n  };\n\n  onDoneHandle = (task) => {\n    const taskVar = { ...task };\n    const { updateTaskByApiAction } = this.props;\n    if (taskVar.done === false) taskVar.done = true;\n    taskVar.importantOrDoneBool = false;\n    updateTaskByApiAction(taskVar);\n  };\n\n  onDeleteHandle = (id) => {\n    const { deleteTaskByApiAction } = this.props;\n    deleteTaskByApiAction({ id });\n  };\n\n  allButtonClick = () => {\n    const { changeDisplayModeAction } = this.props;\n    changeDisplayModeAction(\"all\");\n  };\n\n  handleActiveButtonClick = () => {\n    const { changeDisplayModeAction } = this.props;\n    changeDisplayModeAction(\"actif\");\n  };\n\n  handleAllcompletedButtonClick = () => {\n    const { changeDisplayModeAction } = this.props;\n    changeDisplayModeAction(\"done\");\n  };\n\n  refreshComponent = () => {\n    window.location.reload(false);\n  };\n\n  render() {\n    const {\n      displayMode,\n      tasksFiltred,\n      GroupButtonsColors,\n      loaderBool,\n      connectionBool,\n    } = this.props;\n    return (\n      <>\n        <Table\n          style={{ display: !connectionBool ? \"block\" : \"none\" }}\n          aria-label=\"simple table\"\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>a server side error occured</TableCell>\n              <TableCell>\n                <Button color=\"primary\" onClick={() => this.refreshComponent()}>\n                  Refresh and try again?\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n        </Table>\n\n        <div style={{ display: connectionBool ? \"block\" : \"none\" }}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  {tasksFiltred.length}\n                  {\" items displayed\"}{\" \"}\n                </TableCell>\n                <TableCell align=\"right\"> </TableCell>\n                <TableCell align=\"right\">\n                  {\" \"}\n                  <Loader\n                    style={{ display: loaderBool ? \"block\" : \"none\" }}\n                    type=\"ThreeDots\"\n                    color=\"#2BAD60\"\n                    height=\"100\"\n                    width=\"100\"\n                  />{\" \"}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <ButtonGroup aria-label=\"outlined secondary button group\">\n                    <Button\n                      color={GroupButtonsColors[0]}\n                      onClick={() => this.allButtonClick()}\n                    >\n                      Show all\n                    </Button>\n                    <Button\n                      color={GroupButtonsColors[1]}\n                      onClick={() => this.handleActiveButtonClick()}\n                    >\n                      Show active\n                    </Button>\n                    <Button\n                      color={GroupButtonsColors[2]}\n                      onClick={() => this.handleAllcompletedButtonClick()}\n                    >\n                      Show completed\n                    </Button>\n                  </ButtonGroup>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell colSpan=\"4\" component=\"th\" scope=\"row\">\n                  {tasksFiltred.map((task) => (\n                    <SingleTask\n                      key={task._id}\n                      task={task}\n                      displayMode={displayMode}\n                      onDone={this.onDoneHandle}\n                      onDeleteTask={this.onDeleteHandle}\n                      onImportant={this.onImportantHandle}\n                    />\n                  ))}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </div>\n      </>\n    );\n  }\n}\n\nToDosAndDones.propTypes = {\n  fetchAllTasksByApiAction: PropTypes.func,\n  updateTaskByApiAction: PropTypes.func,\n  deleteTaskByApiAction: PropTypes.func,\n  changeDisplayModeAction: PropTypes.func,\n  displayMode: PropTypes.string,\n  tasks: PropTypes.shape({}),\n  loaderBool: PropTypes.bool,\n  connectionBool: PropTypes.bool,\n  tasksFiltred: PropTypes.arrayOf(PropTypes.shape({})),\n  GroupButtonsColors: PropTypes.arrayOf(string),\n};\n\nToDosAndDones.defaultProps = {\n  connectionBool: true,\n  fetchAllTasksByApiAction: () => {},\n  deleteTaskByApiAction: () => {},\n  updateTaskByApiAction: () => {},\n  changeDisplayModeAction: () => {},\n  displayMode: \"all\",\n  tasks: {},\n  loaderBool: true,\n  tasksFiltred: [{}],\n  GroupButtonsColors: [\"primary\", \"secondary\", \"secondary\"],\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    displayMode: state.displayMode,\n    tasks: state.tasks,\n    connectionBool: state.connectionBool,\n    loaderBool: state.loaderBool,\n    tasksFiltred: filterTasks(state),\n    GroupButtonsColors: getButtonsColorByDisplayMode(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTaskByApiAction: (payload) =>\n    dispatch(actionCreators.updateTaskByApiAction(payload)),\n  deleteTaskByApiAction: (payload) =>\n    dispatch(actionCreators.deleteTaskByApiAction(payload)),\n  fetchAllTasksByApiAction: () =>\n    dispatch(actionCreators.fetchAllTasksByApiAction()),\n  changeDisplayModeAction: (payload) =>\n    dispatch(actionCreators.changeDisplayModeAction(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDosAndDones);\n","import React from \"react\";\n\nimport AddToDo from \"./components/AddToDo\";\nimport ToDosAndDones from \"./components/ToDosAndDones\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <>\n      <AddToDo />\n      <br />\n      <br />\n      <ToDosAndDones />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}