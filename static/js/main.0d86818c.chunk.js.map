{"version":3,"sources":["reducers/tasksReducer.js","actions/actions-types.js","store.js","domain/myAPIS.js","components/AddToDo.jsx","actions/tasksActions.js","components/SingleTask.jsx","selectors/filterSelector.js","components/ToDosAndDones.jsx","App.js","index.js"],"names":["initialStates","tasks","loaderBool","displayMode","connectionBool","tasksReducer","state","action","type","taskArg","payload","data","_id","name","description","important","done","console","log","id","resultToSend","i","length","myData","meta","configureStore","createStore","tasksRecuder","applyMiddleware","promiseMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","addTask","task","axios","post","deleteTask","delete","updateTask","put","AddToDo","props","useState","nameText","setTextName","DescriptionArea","setDescriptionArea","importantRadio","setImportantRadio","addTaskByApiAction","Grid","container","style","justifyContent","alignItems","item","xs","md","lg","xl","TextField","onChange","e","target","value","inputProps","textAlign","fullWidth","label","multiline","rowsMax","RadioGroup","row","aria-label","FormControlLabel","control","Radio","Button","disabled","color","onClick","alert","onClickCalls","defaultProps","connect","dispatch","useStyles","makeStyles","theme","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","SingleTask","onDone","onDeleteTask","onImportant","classes","Accordion","defaultExpanded","backgroundColor","AccordionSummary","aria-controls","Typography","AccordionDetails","className","Divider","AccordionActions","getDisplayMode","filterTasks","createSelector","myArray","Object","values","sort","a","b","filter","el","getButtonsColorByDisplayMode","ToDosAndDones","onImportantHandle","taskVar","updateTaskByApiAction","importantOrDoneBool","onDoneHandle","onDeleteHandle","deleteTaskByApiAction","allButtonClick","changeDisplayModeAction","handleActiveButtonClick","handleAllcompletedButtonClick","refreshComponent","location","reload","fetchAllTasksByApiAction","this","tasksFiltred","GroupButtonsColors","Table","display","TableHead","TableRow","TableCell","align","height","ButtonGroup","TableBody","colSpan","component","scope","map","key","Component","get","App","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0d86818c.chunk.js","sourcesContent":["import {\r\n  DISPLAY_MODE,\r\n  FETCH_DATA_PENDING,\r\n  FETCH_DATA_FULFILLED,\r\n  FETCH_DATA_REJECTED,\r\n  DELETE_DATA_PENDING,\r\n  DELETE_DATA_FULFILLED,\r\n  DELETE_DATA_REJECTED,\r\n  UPDATE_TASK_PENDING,\r\n  UPDATE_TASK_FULFILLED,\r\n  UPDATE_TASK_REJECTED,\r\n  ADD_TASK_FULFILLED,\r\n  ADD_TASK_PENDING,\r\n  ADD_TASK_REJECTED,\r\n  LOADER_BOOL,\r\n} from \"../actions/actions-types\";\r\n\r\nconst initialStates = {\r\n  tasks: {},\r\n  loaderBool: true,\r\n  displayMode: \"all\",\r\n  connectionBool: true,\r\n};\r\n\r\nfunction tasksReducer(state = initialStates, action) {\r\n  // if state is empty, we take initialStates\r\n  const { type } = action;\r\n\r\n  // ///////////////////add promise\r\n  if (type === ADD_TASK_PENDING)\r\n    return {\r\n      ...state,\r\n      loaderBool: true,\r\n      connectionBool: true,\r\n    };\r\n  if (type === ADD_TASK_FULFILLED) {\r\n    const taskArg = action.payload.data.data;\r\n\r\n    return {\r\n      ...state,\r\n      tasks: {\r\n        ...state.tasks,\r\n        [taskArg._id]: {\r\n          _id: taskArg._id,\r\n          name: taskArg.name,\r\n          description: taskArg.description,\r\n          important: taskArg.important,\r\n          done: false,\r\n        },\r\n      },\r\n      loaderBool: false,\r\n    };\r\n  }\r\n  if (type === ADD_TASK_REJECTED) {\r\n    console.log(\"errror\");\r\n    return {\r\n      ...state,\r\n      loaderBool: false,\r\n      connectionBool: false,\r\n    };\r\n  }\r\n\r\n  // /////////////////////data delete promise treatment\r\n  if (type === DELETE_DATA_PENDING)\r\n    return {\r\n      ...state,\r\n      loaderBool: true,\r\n      connectionBool: true,\r\n    };\r\n  if (type === DELETE_DATA_FULFILLED) {\r\n    const data = { ...state.tasks };\r\n    const id = action.payload.data.data;\r\n    delete data[id];\r\n    return {\r\n      ...state,\r\n      tasks: data,\r\n      loaderBool: false,\r\n    };\r\n  }\r\n  if (type === DELETE_DATA_REJECTED) {\r\n    console.log(\"delete error\");\r\n    return {\r\n      ...state,\r\n      loaderBool: false,\r\n      connectionBool: false,\r\n    };\r\n  }\r\n\r\n  // //////////////////data fetching promise treatment\r\n  if (type === FETCH_DATA_PENDING)\r\n    return {\r\n      ...state,\r\n      loaderBool: true,\r\n      connectionBool: true,\r\n    };\r\n  if (type === FETCH_DATA_FULFILLED) {\r\n    const resultToSend = {};\r\n    for (let i = 0; i < action.payload.data.length; i++) {\r\n      resultToSend[action.payload.data[i]._id] = action.payload.data[i];\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      tasks: resultToSend,\r\n      loaderBool: false,\r\n    };\r\n  }\r\n  if (type === FETCH_DATA_REJECTED) {\r\n    console.log(\"errror\");\r\n    return {\r\n      ...state,\r\n      loaderBool: false,\r\n      connectionBool: false,\r\n    };\r\n  }\r\n\r\n  // /////////////////////data update promise\r\n  if (type === UPDATE_TASK_PENDING)\r\n    return {\r\n      ...state,\r\n      loaderBool: true,\r\n      connectionBool: true,\r\n    };\r\n  if (type === UPDATE_TASK_FULFILLED) {\r\n    const myData = { ...state.tasks };\r\n    const { _id } = action.payload.data.data;\r\n\r\n    if (action.meta === true) {\r\n      if (myData[_id].important === false) myData[_id].important = true;\r\n      else myData[_id].important = false;\r\n\r\n      return {\r\n        ...state,\r\n        tasks: myData,\r\n        loaderBool: false,\r\n      };\r\n    }\r\n\r\n    if (myData[_id].done === false) myData[_id].done = true;\r\n    else myData[_id].done = false;\r\n\r\n    return {\r\n      ...state,\r\n      tasks: myData,\r\n      loaderBool: false,\r\n    };\r\n  }\r\n  if (type === UPDATE_TASK_REJECTED) {\r\n    console.log(\"errror\");\r\n    return {\r\n      ...state,\r\n      loaderBool: false,\r\n      connectionBool: false,\r\n    };\r\n  }\r\n\r\n  // end promise treatment\r\n\r\n  if (type === DISPLAY_MODE)\r\n    return {\r\n      ...state,\r\n      displayMode: action.payload,\r\n    };\r\n\r\n  if (type === LOADER_BOOL)\r\n    return {\r\n      ...state,\r\n      loaderBool: true,\r\n    };\r\n\r\n  return state;\r\n}\r\n\r\nexport default tasksReducer;\r\n","export const DISPLAY_MODE = \"DISPLAY_MODE\";\r\n\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\n\r\nexport const FETCH_DATA_PENDING = \"FETCH_DATA_PENDING\";\r\n\r\nexport const FETCH_DATA_FULFILLED = \"FETCH_DATA_FULFILLED\";\r\n\r\nexport const FETCH_DATA_REJECTED = \"FETCH_DATA_REJECTED\";\r\n\r\nexport const DELETE_DATA = \"DELETE_DATA\";\r\n\r\nexport const DELETE_DATA_PENDING = \"DELETE_DATA_PENDING\";\r\n\r\nexport const DELETE_DATA_FULFILLED = \"DELETE_DATA_FULFILLED\";\r\n\r\nexport const DELETE_DATA_REJECTED = \"DELETE_DATA_REJECTED\";\r\n\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";\r\n\r\nexport const UPDATE_TASK_PENDING = \"UPDATE_TASK_PENDING\";\r\n\r\nexport const UPDATE_TASK_FULFILLED = \"UPDATE_TASK_FULFILLED\";\r\n\r\nexport const UPDATE_TASK_REJECTED = \"UPDATE_TASK_REJECTED\";\r\n\r\n\r\nexport const ADD_TASK = \"ADD_TASK\";\r\n\r\nexport const ADD_TASK_PENDING = \"ADD_TASK_PENDING\";\r\n\r\nexport const ADD_TASK_FULFILLED = \"ADD_TASK_FULFILLED\";\r\n\r\nexport const ADD_TASK_REJECTED = \"ADD_TASK_REJECTED\";\r\n\r\nexport const LOADER_BOOL = \"LOADER_BOOL\";\r\n\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport promiseMiddleware from \"redux-promise-middleware\";\r\nimport tasksRecuder from \"./reducers/tasksReducer\";\r\n\r\nfunction configureStore(state) {\r\n  return createStore(\r\n    tasksRecuder,\r\n    applyMiddleware(promiseMiddleware),\r\n    state,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  );\r\n}\r\n\r\n// composeStoreWithMiddleware = applyMiddleware(\r\n//   promise,\r\n// )(createStore)\r\n\r\n// applyMiddleware(promise)(\r\n//   createStore(\r\n//     tasksRecuder,\r\n//     state,\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n//       window.__REDUX_DEVTOOLS_EXTENSION__()\r\n//   )\r\n// );\r\n\r\nexport default configureStore;\r\n","import axios from \"axios\";\r\n\r\nexport function getAllTasks() {\r\n  return axios.get(\"https://my-front-end-to-do.herokuapp.com/api/tasks\");\r\n}\r\n\r\nexport function addTask(task) {\r\n  return axios.post(\"https://my-front-end-to-do.herokuapp.com/api/tasks\", {\r\n    name: task.name,\r\n    description: task.description,\r\n    important: task.important,\r\n    done: task.done,\r\n  });\r\n}\r\n\r\nexport function deleteTask({id}) {\r\n  return axios.delete(\"https://my-front-end-to-do.herokuapp.com/api/tasks?_id=\" + id);\r\n}\r\n\r\nexport function updateTask(task) {\r\n  return axios.put(\"https://my-front-end-to-do.herokuapp.com/api/tasks?_id=\" + task._id, {\r\n    name: task.name,\r\n    description: task.description,\r\n    important: task.important,\r\n    done: task.done,\r\n  });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Radio,\r\n} from \"@material-ui/core\";\r\n\r\nimport * as actionCreators from \"../actions/tasksActions\";\r\n\r\nconst AddToDo = (props) => {\r\n  const [nameText, setTextName] = useState(\"\");\r\n  const [DescriptionArea, setDescriptionArea] = useState(\"\");\r\n  const [importantRadio, setImportantRadio] = useState(\"notImportant\");\r\n  const { addTaskByApiAction,connectionBool,loaderBool } = props;\r\n\r\n  function onClickCalls() {\r\n    if (nameText === \"\") alert(\"you need to name your task\");\r\n    else {\r\n      let myTask = {};\r\n      if (importantRadio === \"notImportant\") {\r\n        myTask = {\r\n          name: nameText,\r\n          description: DescriptionArea,\r\n          important: false,\r\n          done: false,\r\n        };\r\n      } else {\r\n        myTask = {\r\n          name: nameText,\r\n          description: DescriptionArea,\r\n          important: true,\r\n          done: false,\r\n        };\r\n      }\r\n\r\n      addTaskByApiAction(myTask);\r\n    }\r\n    setTextName(\"\");\r\n    setDescriptionArea(\"\");\r\n    setImportantRadio(\"notImportant\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ justifyContent: \"center\" }}>\r\n        <Grid alignItems=\"center\" container item xs={12} md={10} lg={8}>\r\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\r\n            <TextField\r\n              onChange={(e) => {\r\n                setTextName(e.target.value);\r\n              }}\r\n              value={nameText}\r\n              inputProps={{ style: { textAlign: \"center\" } }}\r\n              fullWidth\r\n              id=\"standard-basic\"\r\n              label=\"task name\"\r\n            />\r\n          </Grid>\r\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\r\n            <TextField\r\n              onChange={(e) => {\r\n                setDescriptionArea(e.target.value);\r\n              }}\r\n              value={DescriptionArea}\r\n              inputProps={{ style: { textAlign: \"center\" } }}\r\n              fullWidth\r\n              id=\"standard-multiline-flexible\"\r\n              label=\"task description\"\r\n              multiline\r\n              rowsMax={4}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\r\n            <RadioGroup\r\n              onChange={(e) => {\r\n                setImportantRadio(e.target.value);\r\n              }}\r\n              row\r\n              aria-label=\"gender\"\r\n              name=\"myRadioGroup\"\r\n              value={importantRadio}\r\n            >\r\n              <FormControlLabel\r\n                value=\"notImportant\"\r\n                control={<Radio />}\r\n                label=\"Not important\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"Important\"\r\n                control={<Radio />}\r\n                label=\"Important\"\r\n              />\r\n            </RadioGroup>\r\n          </Grid>\r\n          <Grid container item style={{ justifyContent: \"center\" }} xl={12}>\r\n            <Button\r\n              disabled={!connectionBool||loaderBool}\r\n              fullWidth\r\n              color=\"secondary\"\r\n              onClick={() => onClickCalls()}\r\n            >\r\n              Add task\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nAddToDo.propTypes = {\r\n  addTaskByApiAction: PropTypes.func,\r\n};\r\nAddToDo.defaultProps = {\r\n  addTaskByApiAction: () => {},\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    connectionBool: state.connectionBool,\r\n    loaderBool: state.loaderBool,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTaskByApiAction: (payload) =>\r\n    dispatch(actionCreators.addTaskByApiAction(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToDo);\r\n","import {\r\n  DISPLAY_MODE,\r\n  ADD_TASK,\r\n  FETCH_DATA,\r\n  DELETE_DATA,\r\n  UPDATE_TASK,\r\n  LOADER_BOOL,\r\n} from \"./actions-types\";\r\nimport { getAllTasks, deleteTask, updateTask, addTask } from \"../domain/myAPIS\";\r\n\r\nconst fetchAllTasksByApiAction = () => {\r\n  return {\r\n    type: FETCH_DATA,\r\n    payload: getAllTasks(),\r\n  };\r\n};\r\n\r\nconst addTaskByApiAction = (task) => {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: addTask(task),\r\n  };\r\n};\r\n\r\nfunction deleteTaskByApiAction({ id }) {\r\n  return {\r\n    type: DELETE_DATA,\r\n    payload: deleteTask({ id }),\r\n  };\r\n}\r\n\r\nfunction updateTaskByApiAction(task) {\r\n  // console.log(isImportantTest);\r\n  return {\r\n    type: UPDATE_TASK,\r\n    payload: updateTask(task),\r\n    meta: task.importantOrDoneBool,\r\n  };\r\n}\r\n\r\nfunction changeDisplayModeAction(mode) {\r\n  return {\r\n    type: DISPLAY_MODE,\r\n    payload: mode,\r\n  };\r\n}\r\n\r\nfunction addTaskAction(task) {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: { ...task },\r\n  };\r\n}\r\n\r\nfunction setLoaderBoolToActiveAction() {\r\n  return {\r\n    type: LOADER_BOOL,\r\n  };\r\n}\r\n\r\nexport {\r\n  setLoaderBoolToActiveAction,\r\n  addTaskByApiAction,\r\n  updateTaskByApiAction,\r\n  deleteTaskByApiAction,\r\n  fetchAllTasksByApiAction,\r\n  changeDisplayModeAction,\r\n  addTaskAction,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionActions from \"@material-ui/core/AccordionActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nconst SingleTask = (props) => {\r\n  const { task, onDone, onDeleteTask, onImportant } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  if (task.done === false && task.important === true)\r\n    return (\r\n      <>\r\n        <Accordion defaultExpanded style={{ backgroundColor: \"yellow\" }}>\r\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\r\n            <div>\r\n              <Typography>{task.name}</Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <div>\r\n              <Typography className={classes.secondaryHeading}>\r\n                {task.description}\r\n              </Typography>\r\n            </div>\r\n          </AccordionDetails>\r\n          <Divider />\r\n          <AccordionActions>\r\n            <Button color=\"secondary\" onClick={() => onImportant(task)}>\r\n              {\" \"}\r\n              remove from important\r\n            </Button>\r\n\r\n            <Button color=\"secondary\" onClick={() => onDone(task)}>\r\n              {\" \"}\r\n              Add to done\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\r\n              Delete\r\n            </Button>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      </>\r\n    );\r\n  if (task.done === false && task.important === false)\r\n    return (\r\n      <>\r\n        <Accordion defaultExpanded style={{ backgroundColor: \"white\" }}>\r\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\r\n            <div>\r\n              <Typography>{task.name}</Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <div>\r\n              <Typography className={classes.secondaryHeading}>\r\n                {task.description}\r\n              </Typography>\r\n            </div>\r\n          </AccordionDetails>\r\n          <Divider />\r\n          <AccordionActions>\r\n            <Button color=\"secondary\" onClick={() => onImportant(task)}>\r\n              {\" \"}\r\n              make Important\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={() => onDone(task)}>\r\n              {\" \"}\r\n              Add to done\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\r\n              Delete\r\n            </Button>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      </>\r\n    );\r\n  if (task.done === true)\r\n    return (\r\n      <>\r\n        <Accordion defaultExpanded style={{ backgroundColor: \"lightgrey\" }}>\r\n          <AccordionSummary aria-controls=\"panel1c-content\" id=\"panel1c-header\">\r\n            <div>\r\n              <Typography>{task.name}</Typography>\r\n            </div>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <div>\r\n              <Typography className={classes.secondaryHeading}>\r\n                {task.description}\r\n              </Typography>\r\n            </div>\r\n          </AccordionDetails>\r\n          <Divider />\r\n          <AccordionActions>\r\n            <Button color=\"secondary\" onClick={() => onDeleteTask(task._id)}>\r\n              Delete\r\n            </Button>\r\n          </AccordionActions>\r\n        </Accordion>\r\n      </>\r\n    );\r\n  return <></>;\r\n};\r\nSingleTask.propTypes = {\r\n  task: PropTypes.shape(),\r\n  onDone: PropTypes.func,\r\n  onDeleteTask: PropTypes.func,\r\n  onImportant: PropTypes.func,\r\n};\r\nSingleTask.defaultProps = {\r\n  task: {},\r\n  onDone: () => {},\r\n  onDeleteTask: () => {},\r\n  onImportant: () => {},\r\n};\r\nexport default SingleTask;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst getTasks = (state) => state.tasks;\r\nconst getDisplayMode = (state) => state.displayMode;\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const filterTasks = createSelector(\r\n  [getDisplayMode, getTasks],\r\n  (displayMode, tasks) => {\r\n    let myArray = Object.values({ ...tasks });\r\n\r\n    if (displayMode === \"all\") {\r\n      myArray.sort((a, b) => (a.important && !b.important ? 1 : -1));\r\n      myArray.sort((a, b) => (a.done && !b.done ? 1 : -1));\r\n      return myArray;\r\n    }\r\n\r\n    if (displayMode === \"actif\") {\r\n      myArray.sort((a, b) => (a.important && !b.important ? 1 : -1));\r\n      myArray.sort((a, b) => (a.done && !b.done ? 1 : -1));\r\n      myArray = myArray.filter((el) => el.done === false);\r\n      return myArray;\r\n    }\r\n    if (displayMode === \"done\") {\r\n      myArray = myArray.filter((el) => el.done === true);\r\n      return myArray;\r\n    }\r\n    return tasks;\r\n  }\r\n);\r\n\r\nexport const getButtonsColorByDisplayMode = createSelector(\r\n  [getDisplayMode],\r\n  (displayMode) => {\r\n    if (displayMode === \"all\") {\r\n      const colorAll = \"primary\";\r\n      const colorActif = \"secondary\";\r\n      const colorDone = \"secondary\";\r\n      return [colorAll, colorActif, colorDone];\r\n    }\r\n\r\n    if (displayMode === \"actif\") {\r\n      const colorAll = \"secondary\";\r\n      const colorActif = \"primary\";\r\n      const colorDone = \"secondary\";\r\n      return [colorAll, colorActif, colorDone];\r\n    }\r\n\r\n    if (displayMode === \"done\") {\r\n      const colorAll = \"secondary\";\r\n      const colorActif = \"secondary\";\r\n      const colorDone = \"primary\";\r\n      return [colorAll, colorActif, colorDone];\r\n    }\r\n    return [];\r\n  }\r\n);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes, { string } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport SingleTask from \"./SingleTask\";\r\n\r\nimport {\r\n  filterTasks,\r\n  getButtonsColorByDisplayMode,\r\n} from \"../selectors/filterSelector\";\r\nimport * as actionCreators from \"../actions/tasksActions\";\r\n\r\nclass ToDosAndDones extends Component {\r\n  componentDidMount() {\r\n    const { fetchAllTasksByApiAction } = this.props;\r\n    fetchAllTasksByApiAction();\r\n  }\r\n\r\n  onImportantHandle = (task) => {\r\n    const taskVar = { ...task };\r\n    const { updateTaskByApiAction } = this.props;\r\n    if (taskVar.important === false) taskVar.important = true;\r\n    else taskVar.important = false;\r\n    taskVar.importantOrDoneBool = true;\r\n\r\n    updateTaskByApiAction(taskVar);\r\n  };\r\n\r\n  onDoneHandle = (task) => {\r\n    const taskVar = { ...task };\r\n    const { updateTaskByApiAction } = this.props;\r\n    if (taskVar.done === false) taskVar.done = true;\r\n    taskVar.importantOrDoneBool = false;\r\n    updateTaskByApiAction(taskVar);\r\n  };\r\n\r\n  onDeleteHandle = (id) => {\r\n    const { deleteTaskByApiAction } = this.props;\r\n    deleteTaskByApiAction({ id });\r\n  };\r\n\r\n  allButtonClick = () => {\r\n    const { changeDisplayModeAction } = this.props;\r\n    changeDisplayModeAction(\"all\");\r\n  };\r\n\r\n  handleActiveButtonClick = () => {\r\n    const { changeDisplayModeAction } = this.props;\r\n    changeDisplayModeAction(\"actif\");\r\n  };\r\n\r\n  handleAllcompletedButtonClick = () => {\r\n    const { changeDisplayModeAction } = this.props;\r\n    changeDisplayModeAction(\"done\");\r\n  };\r\n\r\n  refreshComponent = () => {\r\n    window.location.reload(false);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      displayMode,\r\n      tasksFiltred,\r\n      GroupButtonsColors,\r\n      loaderBool,\r\n      connectionBool,\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <Table\r\n          style={{ display: !connectionBool ? \"block\" : \"none\" }}\r\n          aria-label=\"simple table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>a server side error occured</TableCell>\r\n              <TableCell>\r\n                <Button color=\"primary\" onClick={() => this.refreshComponent()}>\r\n                  Refresh and try again?\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n        </Table>\r\n\r\n        <div style={{ display: connectionBool ? \"block\" : \"none\" }}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  {tasksFiltred.length}\r\n                  {\" items displayed\"}{\" \"}\r\n                </TableCell>\r\n                <TableCell align=\"right\"> </TableCell>\r\n                <TableCell align=\"right\">\r\n                  {\" \"}\r\n                  <Loader\r\n                    style={{ display: loaderBool ? \"block\" : \"none\" }}\r\n                    type=\"ThreeDots\"\r\n                    color=\"#2BAD60\"\r\n                    height=\"100\"\r\n                    width=\"100\"\r\n                  />{\" \"}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                  <ButtonGroup aria-label=\"outlined secondary button group\">\r\n                    <Button\r\n                      color={GroupButtonsColors[0]}\r\n                      onClick={() => this.allButtonClick()}\r\n                    >\r\n                      Show all\r\n                    </Button>\r\n                    <Button\r\n                      color={GroupButtonsColors[1]}\r\n                      onClick={() => this.handleActiveButtonClick()}\r\n                    >\r\n                      Show active\r\n                    </Button>\r\n                    <Button\r\n                      color={GroupButtonsColors[2]}\r\n                      onClick={() => this.handleAllcompletedButtonClick()}\r\n                    >\r\n                      Show completed\r\n                    </Button>\r\n                  </ButtonGroup>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell colSpan=\"4\" component=\"th\" scope=\"row\">\r\n                  {tasksFiltred.map((task) => (\r\n                    <SingleTask\r\n                      key={task._id}\r\n                      task={task}\r\n                      displayMode={displayMode}\r\n                      onDone={this.onDoneHandle}\r\n                      onDeleteTask={this.onDeleteHandle}\r\n                      onImportant={this.onImportantHandle}\r\n                    />\r\n                  ))}\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nToDosAndDones.propTypes = {\r\n  fetchAllTasksByApiAction: PropTypes.func,\r\n  updateTaskByApiAction: PropTypes.func,\r\n  deleteTaskByApiAction: PropTypes.func,\r\n  changeDisplayModeAction: PropTypes.func,\r\n  displayMode: PropTypes.string,\r\n  tasks: PropTypes.shape({}),\r\n  loaderBool: PropTypes.bool,\r\n  connectionBool: PropTypes.bool,\r\n  tasksFiltred: PropTypes.arrayOf(PropTypes.shape({})),\r\n  GroupButtonsColors: PropTypes.arrayOf(string),\r\n};\r\n\r\nToDosAndDones.defaultProps = {\r\n  connectionBool: true,\r\n  fetchAllTasksByApiAction: () => {},\r\n  deleteTaskByApiAction: () => {},\r\n  updateTaskByApiAction: () => {},\r\n  changeDisplayModeAction: () => {},\r\n  displayMode: \"all\",\r\n  tasks: {},\r\n  loaderBool: true,\r\n  tasksFiltred: [{}],\r\n  GroupButtonsColors: [\"primary\", \"secondary\", \"secondary\"],\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    displayMode: state.displayMode,\r\n    tasks: state.tasks,\r\n    connectionBool: state.connectionBool,\r\n    loaderBool: state.loaderBool,\r\n    tasksFiltred: filterTasks(state),\r\n    GroupButtonsColors: getButtonsColorByDisplayMode(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateTaskByApiAction: (payload) =>\r\n    dispatch(actionCreators.updateTaskByApiAction(payload)),\r\n  deleteTaskByApiAction: (payload) =>\r\n    dispatch(actionCreators.deleteTaskByApiAction(payload)),\r\n  fetchAllTasksByApiAction: () =>\r\n    dispatch(actionCreators.fetchAllTasksByApiAction()),\r\n  changeDisplayModeAction: (payload) =>\r\n    dispatch(actionCreators.changeDisplayModeAction(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDosAndDones);\r\n","import React from \"react\";\r\n\r\nimport AddToDo from \"./components/AddToDo\";\r\nimport ToDosAndDones from \"./components/ToDosAndDones\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <AddToDo />\r\n      <br />\r\n      <br />\r\n      <ToDosAndDones />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}